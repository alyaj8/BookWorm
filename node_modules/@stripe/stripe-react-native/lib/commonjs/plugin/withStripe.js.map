{"version":3,"sources":["withStripe.ts"],"names":["AndroidConfig","Manifest","addMetaDataItemToMainApplication","getMainApplicationOrThrow","removeMetaDataItemFromMainApplication","pkg","require","withStripe","config","props","withStripeIos","withNoopSwiftFile","withStripeAndroid","expoConfig","merchantIdentifier","modResults","setApplePayEntitlement","merchantIdentifiers","entitlements","key","merchants","Array","isArray","id","includes","push","length","IOSConfig","XcodeProjectFile","withBuildSourceFile","filePath","contents","join","enableGooglePay","setGooglePayMetaData","enabled","GOOGLE_PAY_META_NAME","mainApplication","name","version"],"mappings":"yNAAA,mDASA,0BAIIA,6BAAcC,QAJlB,CACEC,gCADF,uBACEA,gCADF,CAEEC,yBAFF,uBAEEA,yBAFF,CAGEC,qCAHF,uBAGEA,qCAHF,CAMA,GAAMC,CAAAA,GAAG,CAAGC,OAAO,CAAC,0CAAD,CAAnB,CAWA,GAAMC,CAAAA,UAA2C,CAAG,QAA9CA,CAAAA,UAA8C,CAACC,MAAD,CAASC,KAAT,CAAmB,CACrED,MAAM,CAAGE,aAAa,CAACF,MAAD,CAASC,KAAT,CAAtB,CACAD,MAAM,CAAGG,iBAAiB,CAACH,MAAD,CAA1B,CACAA,MAAM,CAAGI,iBAAiB,CAACJ,MAAD,CAASC,KAAT,CAA1B,CACA,MAAOD,CAAAA,MAAP,CACD,CALD,CAOA,GAAME,CAAAA,aAA8C,CAAG,QAAjDA,CAAAA,aAAiD,CACrDG,UADqD,MAGlD,IADDC,CAAAA,kBACC,MADDA,kBACC,CACH,MAAO,yCAAsBD,UAAtB,CAAkC,SAACL,MAAD,CAAY,CACnDA,MAAM,CAACO,UAAP,CAAoBC,sBAAsB,CACxCF,kBADwC,CAExCN,MAAM,CAACO,UAFiC,CAA1C,CAIA,MAAOP,CAAAA,MAAP,CACD,CANM,CAAP,CAOD,CAXD,CAqBO,QAASQ,CAAAA,sBAAT,CACLC,mBADK,CAELC,YAFK,CAGgB,uBACrB,GAAMC,CAAAA,GAAG,CAAG,qCAAZ,CAEA,GAAMC,CAAAA,SAAmB,oBAAGF,YAAY,CAACC,GAAD,CAAf,0BAAwB,EAAjD,CAEA,GAAI,CAACE,KAAK,CAACC,OAAN,CAAcL,mBAAd,CAAL,CAAyC,CACvCA,mBAAmB,CAAG,CAACA,mBAAD,CAAtB,CACD,CAED,IAAK,GAAMM,CAAAA,EAAX,GAAiBN,CAAAA,mBAAjB,CAAsC,CACpC,GAAIM,EAAE,EAAI,CAACH,SAAS,CAACI,QAAV,CAAmBD,EAAnB,CAAX,CAAmC,CACjCH,SAAS,CAACK,IAAV,CAAeF,EAAf,EACD,CACF,CAED,GAAIH,SAAS,CAACM,MAAd,CAAsB,CACpBR,YAAY,CAACC,GAAD,CAAZ,CAAoBC,SAApB,CACD,CACD,MAAOF,CAAAA,YAAP,CACD,CAKM,GAAMP,CAAAA,iBAA+B,CAAG,QAAlCA,CAAAA,iBAAkC,CAACH,MAAD,CAAY,CACzD,MAAOmB,0BAAUC,gBAAV,CAA2BC,mBAA3B,CAA+CrB,MAA/C,CAAuD,CAC5DsB,QAAQ,CAAE,iBADkD,CAE5DC,QAAQ,CAAE,CACR,IADQ,CAER,eAFQ,CAGR,8FAHQ,CAIR,IAJQ,CAKR,EALQ,EAMRC,IANQ,CAMH,IANG,CAFkD,CAAvD,CAAP,CAUD,CAXM,C,4CAaP,GAAMpB,CAAAA,iBAAkD,CAAG,QAArDA,CAAAA,iBAAqD,CACzDC,UADyD,OAGtD,iCADDoB,eACC,CADDA,eACC,gCADiB,KACjB,uBACH,MAAO,uCAAoBpB,UAApB,CAAgC,SAACL,MAAD,CAAY,CACjDA,MAAM,CAACO,UAAP,CAAoBmB,oBAAoB,CACtCD,eADsC,CAEtCzB,MAAM,CAACO,UAF+B,CAAxC,CAKA,MAAOP,CAAAA,MAAP,CACD,CAPM,CAAP,CAQD,CAZD,CAwBO,QAAS0B,CAAAA,oBAAT,CACLC,OADK,CAELpB,UAFK,CAGmC,CACxC,GAAMqB,CAAAA,oBAAoB,CAAG,2CAA7B,CACA,GAAMC,CAAAA,eAAe,CAAGlC,yBAAyB,CAACY,UAAD,CAAjD,CACA,GAAIoB,OAAJ,CAAa,CACXjC,gCAAgC,CAC9BmC,eAD8B,CAE9BD,oBAF8B,CAG9B,MAH8B,CAAhC,CAKD,CAND,IAMO,CACLhC,qCAAqC,CACnCiC,eADmC,CAEnCD,oBAFmC,CAArC,CAID,CAED,MAAOrB,CAAAA,UAAP,CACD,C,aAEc,uCAAoBR,UAApB,CAAgCF,GAAG,CAACiC,IAApC,CAA0CjC,GAAG,CAACkC,OAA9C,C","sourcesContent":["import {\n  AndroidConfig,\n  ConfigPlugin,\n  createRunOncePlugin,\n  IOSConfig,\n  withAndroidManifest,\n  withEntitlementsPlist,\n} from '@expo/config-plugins';\n\nconst {\n  addMetaDataItemToMainApplication,\n  getMainApplicationOrThrow,\n  removeMetaDataItemFromMainApplication,\n} = AndroidConfig.Manifest;\n\nconst pkg = require('@stripe/stripe-react-native/package.json');\n\ntype StripePluginProps = {\n  /**\n   * The iOS merchant ID used for enabling Apple Pay.\n   * Without this, the error \"Missing merchant identifier\" will be thrown on iOS.\n   */\n  merchantIdentifier: string | string[];\n  enableGooglePay: boolean;\n};\n\nconst withStripe: ConfigPlugin<StripePluginProps> = (config, props) => {\n  config = withStripeIos(config, props);\n  config = withNoopSwiftFile(config);\n  config = withStripeAndroid(config, props);\n  return config;\n};\n\nconst withStripeIos: ConfigPlugin<StripePluginProps> = (\n  expoConfig,\n  { merchantIdentifier }\n) => {\n  return withEntitlementsPlist(expoConfig, (config) => {\n    config.modResults = setApplePayEntitlement(\n      merchantIdentifier,\n      config.modResults\n    );\n    return config;\n  });\n};\n\n/**\n * Adds the following to the entitlements:\n *\n * <key>com.apple.developer.in-app-payments</key>\n * <array>\n *\t <string>[MERCHANT_IDENTIFIER]</string>\n * </array>\n */\nexport function setApplePayEntitlement(\n  merchantIdentifiers: string | string[],\n  entitlements: Record<string, any>\n): Record<string, any> {\n  const key = 'com.apple.developer.in-app-payments';\n\n  const merchants: string[] = entitlements[key] ?? [];\n\n  if (!Array.isArray(merchantIdentifiers)) {\n    merchantIdentifiers = [merchantIdentifiers];\n  }\n\n  for (const id of merchantIdentifiers) {\n    if (id && !merchants.includes(id)) {\n      merchants.push(id);\n    }\n  }\n\n  if (merchants.length) {\n    entitlements[key] = merchants;\n  }\n  return entitlements;\n}\n\n/**\n * Add a blank Swift file to the Xcode project for Swift compatibility.\n */\nexport const withNoopSwiftFile: ConfigPlugin = (config) => {\n  return IOSConfig.XcodeProjectFile.withBuildSourceFile(config, {\n    filePath: 'noop-file.swift',\n    contents: [\n      '//',\n      '// @generated',\n      '// A blank Swift file must be created for native modules with Swift files to work correctly.',\n      '//',\n      '',\n    ].join('\\n'),\n  });\n};\n\nconst withStripeAndroid: ConfigPlugin<StripePluginProps> = (\n  expoConfig,\n  { enableGooglePay = false }\n) => {\n  return withAndroidManifest(expoConfig, (config) => {\n    config.modResults = setGooglePayMetaData(\n      enableGooglePay,\n      config.modResults\n    );\n\n    return config;\n  });\n};\n\n/**\n * Adds the following to AndroidManifest.xml:\n *\n * <application>\n *   ...\n *\t <meta-data\n *     android:name=\"com.google.android.gms.wallet.api.enabled\"\n *     android:value=\"true|false\" />\n * </application>\n */\nexport function setGooglePayMetaData(\n  enabled: boolean,\n  modResults: AndroidConfig.Manifest.AndroidManifest\n): AndroidConfig.Manifest.AndroidManifest {\n  const GOOGLE_PAY_META_NAME = 'com.google.android.gms.wallet.api.enabled';\n  const mainApplication = getMainApplicationOrThrow(modResults);\n  if (enabled) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      GOOGLE_PAY_META_NAME,\n      'true'\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(\n      mainApplication,\n      GOOGLE_PAY_META_NAME\n    );\n  }\n\n  return modResults;\n}\n\nexport default createRunOncePlugin(withStripe, pkg.name, pkg.version);\n"]}