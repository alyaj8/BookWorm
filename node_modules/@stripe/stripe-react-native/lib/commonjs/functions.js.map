{"version":3,"sources":["functions.ts"],"names":["APPLE_PAY_NOT_SUPPORTED_MESSAGE","createPaymentMethod","params","options","NativeStripeSdk","paymentMethod","error","createToken","type","country","toLowerCase","routingNumber","MissingRoutingNumber","token","retrievePaymentIntent","clientSecret","paymentIntent","retrieveSetupIntent","setupIntent","confirmPayment","paymentIntentClientSecret","isApplePaySupported","isiOS","presentApplePay","code","ApplePayError","Canceled","message","updateApplePaySummaryItems","summaryItems","errorAddressFields","confirmApplePayPayment","handleNextAction","confirmSetupIntent","createTokenForCVCUpdate","cvc","tokenId","handleURLCallback","url","stripeHandled","verifyMicrodepositsForPayment","verifyMicrodeposits","verifyMicrodepositsForSetup","initPaymentSheet","paymentOption","presentPaymentSheet","confirmPaymentSheetPayment","isGooglePaySupported","isAndroid","initGooglePay","presentGooglePay","createGooglePayPaymentMethod","openApplePaySetup","collectBankAccountForPayment","collectBankAccount","collectBankAccountForSetup","isCardInWallet","isInWallet","Constants","getConstants"],"mappings":"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","sourcesContent":["import { isAndroid, isiOS, createError } from './helpers';\nimport { MissingRoutingNumber } from './types/Errors';\nimport NativeStripeSdk from './NativeStripeSdk';\nimport {\n  ApplePay,\n  ApplePayError,\n  ApplePayResult,\n  ConfirmPaymentResult,\n  ConfirmPaymentSheetPaymentResult,\n  SetupIntent,\n  PaymentIntent,\n  ConfirmSetupIntentResult,\n  CreatePaymentMethodResult,\n  CreateTokenForCVCUpdateResult,\n  CreateTokenResult,\n  GooglePayInitResult,\n  HandleNextActionResult,\n  InitPaymentSheetResult,\n  PaymentMethod,\n  PaymentSheet,\n  PayWithGooglePayResult,\n  PresentPaymentSheetResult,\n  RetrievePaymentIntentResult,\n  RetrieveSetupIntentResult,\n  StripeError,\n  GooglePay,\n  CreateGooglePayPaymentMethodResult,\n  OpenApplePaySetupResult,\n  Token,\n  VerifyMicrodepositsParams,\n  VerifyMicrodepositsForPaymentResult,\n  VerifyMicrodepositsForSetupResult,\n  CollectBankAccountForPaymentResult,\n  CollectBankAccountForSetupResult,\n  IsCardInWalletResult,\n} from './types';\n\nconst APPLE_PAY_NOT_SUPPORTED_MESSAGE =\n  'Apple pay is not supported on this device';\n\nexport const createPaymentMethod = async (\n  params: PaymentMethod.CreateParams,\n  options: PaymentMethod.CreateOptions = {}\n): Promise<CreatePaymentMethodResult> => {\n  try {\n    const { paymentMethod, error } = await NativeStripeSdk.createPaymentMethod(\n      params,\n      options\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentMethod: paymentMethod!,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const createToken = async (\n  params: Token.CreateParams\n): Promise<CreateTokenResult> => {\n  if (\n    params.type === 'BankAccount' &&\n    params.country?.toLowerCase() === 'us' &&\n    !params.routingNumber\n  ) {\n    return {\n      error: MissingRoutingNumber,\n    };\n  }\n\n  try {\n    const { token, error } = await NativeStripeSdk.createToken(params);\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      token: token!,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const retrievePaymentIntent = async (\n  clientSecret: string\n): Promise<RetrievePaymentIntentResult> => {\n  try {\n    const { paymentIntent, error } =\n      await NativeStripeSdk.retrievePaymentIntent(clientSecret);\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const retrieveSetupIntent = async (\n  clientSecret: string\n): Promise<RetrieveSetupIntentResult> => {\n  try {\n    const { setupIntent, error } = await NativeStripeSdk.retrieveSetupIntent(\n      clientSecret\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      setupIntent: setupIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const confirmPayment = async (\n  paymentIntentClientSecret: string,\n  params: PaymentIntent.ConfirmParams,\n  options: PaymentIntent.ConfirmOptions = {}\n): Promise<ConfirmPaymentResult> => {\n  try {\n    const { paymentIntent, error } = await NativeStripeSdk.confirmPayment(\n      paymentIntentClientSecret,\n      params,\n      options\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const isApplePaySupported = async (): Promise<boolean> => {\n  return isiOS && (await NativeStripeSdk.isApplePaySupported());\n};\n\nexport const presentApplePay = async (\n  params: ApplePay.PresentParams\n): Promise<ApplePayResult> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: {\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      },\n    };\n  }\n\n  try {\n    const { paymentMethod, error } = await NativeStripeSdk.presentApplePay(\n      params\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return { paymentMethod: paymentMethod! };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const updateApplePaySummaryItems = async (\n  summaryItems: ApplePay.CartSummaryItem[],\n  errorAddressFields: Array<{\n    field: ApplePay.AddressFields;\n    message?: string;\n  }> = []\n): Promise<{ error?: StripeError<ApplePayError> }> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: {\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      },\n    };\n  }\n\n  try {\n    await NativeStripeSdk.updateApplePaySummaryItems(\n      summaryItems,\n      errorAddressFields\n    );\n\n    return {};\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const confirmApplePayPayment = async (\n  clientSecret: string\n): Promise<{ error?: StripeError<ApplePayError> }> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: {\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      },\n    };\n  }\n  try {\n    await NativeStripeSdk.confirmApplePayPayment(clientSecret);\n    return {};\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const handleNextAction = async (\n  paymentIntentClientSecret: string\n): Promise<HandleNextActionResult> => {\n  try {\n    const { paymentIntent, error } = await NativeStripeSdk.handleNextAction(\n      paymentIntentClientSecret\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const confirmSetupIntent = async (\n  paymentIntentClientSecret: string,\n  params: SetupIntent.ConfirmParams,\n  options: SetupIntent.ConfirmOptions = {}\n): Promise<ConfirmSetupIntentResult> => {\n  try {\n    const { setupIntent, error } = await NativeStripeSdk.confirmSetupIntent(\n      paymentIntentClientSecret,\n      params,\n      options\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      setupIntent: setupIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const createTokenForCVCUpdate = async (\n  cvc: string\n): Promise<CreateTokenForCVCUpdateResult> => {\n  try {\n    const { tokenId, error } = await NativeStripeSdk.createTokenForCVCUpdate(\n      cvc\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      tokenId: tokenId!,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const handleURLCallback = async (url: string): Promise<boolean> => {\n  const stripeHandled = await NativeStripeSdk.handleURLCallback(url);\n  return stripeHandled;\n};\n\nexport const verifyMicrodepositsForPayment = async (\n  clientSecret: string,\n  params: VerifyMicrodepositsParams\n): Promise<VerifyMicrodepositsForPaymentResult> => {\n  try {\n    const { paymentIntent, error } = (await NativeStripeSdk.verifyMicrodeposits(\n      true,\n      clientSecret,\n      params\n    )) as VerifyMicrodepositsForPaymentResult;\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const verifyMicrodepositsForSetup = async (\n  clientSecret: string,\n  params: VerifyMicrodepositsParams\n): Promise<VerifyMicrodepositsForSetupResult> => {\n  try {\n    const { setupIntent, error } = (await NativeStripeSdk.verifyMicrodeposits(\n      false,\n      clientSecret,\n      params\n    )) as VerifyMicrodepositsForSetupResult;\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      setupIntent: setupIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const initPaymentSheet = async (\n  params: PaymentSheet.SetupParams\n): Promise<InitPaymentSheetResult> => {\n  try {\n    const { paymentOption, error } = await NativeStripeSdk.initPaymentSheet(\n      params\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentOption,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const presentPaymentSheet =\n  async (): Promise<PresentPaymentSheetResult> => {\n    try {\n      const { paymentOption, error } =\n        await NativeStripeSdk.presentPaymentSheet();\n      if (error) {\n        return {\n          error,\n        };\n      }\n      return {\n        paymentOption: paymentOption!,\n      };\n    } catch (error: any) {\n      return {\n        error,\n      };\n    }\n  };\n\nexport const confirmPaymentSheetPayment =\n  async (): Promise<ConfirmPaymentSheetPaymentResult> => {\n    try {\n      const { error } = await NativeStripeSdk.confirmPaymentSheetPayment();\n      if (error) {\n        return {\n          error,\n        };\n      }\n      return {};\n    } catch (error: any) {\n      return {\n        error,\n      };\n    }\n  };\n\nexport const isGooglePaySupported = async (\n  params?: GooglePay.IsSupportedParams\n): Promise<boolean> => {\n  return (\n    isAndroid && (await NativeStripeSdk.isGooglePaySupported(params ?? {}))\n  );\n};\n\nexport const initGooglePay = async (\n  params: GooglePay.InitParams\n): Promise<GooglePayInitResult> => {\n  try {\n    const { error } = await NativeStripeSdk.initGooglePay(params);\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {};\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const presentGooglePay = async (\n  params: GooglePay.PresentParams\n): Promise<PayWithGooglePayResult> => {\n  try {\n    const { error } = await NativeStripeSdk.presentGooglePay(params);\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {};\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const createGooglePayPaymentMethod = async (\n  params: GooglePay.CreatePaymentMethodParams\n): Promise<CreateGooglePayPaymentMethodResult> => {\n  try {\n    const { error, paymentMethod } =\n      await NativeStripeSdk.createGooglePayPaymentMethod(params);\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentMethod: paymentMethod!,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const openApplePaySetup = async (): Promise<OpenApplePaySetupResult> => {\n  try {\n    const { error } = await NativeStripeSdk.openApplePaySetup();\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {};\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const collectBankAccountForPayment = async (\n  clientSecret: string,\n  params: PaymentMethod.CollectBankAccountParams\n): Promise<CollectBankAccountForPaymentResult> => {\n  try {\n    const { paymentIntent, error } = (await NativeStripeSdk.collectBankAccount(\n      true,\n      clientSecret,\n      params\n    )) as CollectBankAccountForPaymentResult;\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const collectBankAccountForSetup = async (\n  clientSecret: string,\n  params: PaymentMethod.CollectBankAccountParams\n): Promise<CollectBankAccountForSetupResult> => {\n  try {\n    const { setupIntent, error } = (await NativeStripeSdk.collectBankAccount(\n      false,\n      clientSecret,\n      params\n    )) as CollectBankAccountForSetupResult;\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      setupIntent: setupIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const isCardInWallet = async (params: {\n  cardLastFour: string;\n}): Promise<IsCardInWalletResult> => {\n  try {\n    const { isInWallet, token, error } = await NativeStripeSdk.isCardInWallet(\n      params\n    );\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      isInWallet: isInWallet as boolean,\n      token: token,\n    };\n  } catch (error: any) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const Constants = NativeStripeSdk.getConstants();\n"]}