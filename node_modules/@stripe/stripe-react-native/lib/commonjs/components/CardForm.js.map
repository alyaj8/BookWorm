{"version":3,"sources":["CardForm.tsx"],"names":["CardFormNative","CardForm","ref","onFormComplete","cardStyle","placeholders","defaultValues","props","inputRef","onFormCompleteHandler","event","card","nativeEvent","data","last4","expiryMonth","expiryYear","complete","brand","country","postalCode","hasOwnProperty","number","cvc","__DEV__","console","warn","focus","UIManager","dispatchViewManagerCommand","current","blur","onFocusHandler","focusedField","inputRefValue","backgroundColor","borderColor","borderWidth","borderRadius","cursorColor","fontSize","placeholderColor","textColor","textErrorColor","fontFamily","expiration"],"mappings":"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","sourcesContent":["import type { CardFormView } from '../types';\nimport React, {\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n} from 'react';\nimport {\n  AccessibilityProps,\n  NativeSyntheticEvent,\n  requireNativeComponent,\n  UIManager,\n  StyleProp,\n  findNodeHandle,\n  ViewStyle,\n} from 'react-native';\nimport {\n  currentlyFocusedInput,\n  focusInput,\n  registerInput,\n  unregisterInput,\n} from '../helpers';\n\nconst CardFormNative =\n  requireNativeComponent<CardFormView.NativeProps>('CardForm');\n\n/**\n *  Card Form Component Props\n */\nexport interface Props extends AccessibilityProps {\n  style?: StyleProp<ViewStyle>;\n  autofocus?: boolean;\n  testID?: string;\n\n  /** All styles except backgroundColor, cursorColor, borderColor, and borderRadius are Android only */\n  cardStyle?: CardFormView.Styles;\n  // isUserInteractionEnabled?: boolean;\n\n  // TODO: will make it public when iOS SDK allows for this\n  // postalCodeEnabled?: boolean;\n\n  /** Android only */\n  placeholders?: CardFormView.Placeholders;\n  /** Android only */\n  defaultValues?: CardFormView.DefaultValues;\n  // onBlur?(): void;\n  // onFocus?(focusedField: CardFormView.FieldNames | null): void;\n  onFormComplete?(card: CardFormView.Details): void;\n  /**\n   * WARNING: If set to `true` the full card number will be returned in the `onFormComplete` handler.\n   * Only do this if you're certain that you fulfill the necessary PCI compliance requirements.\n   * Make sure that you're not mistakenly logging or storing full card details!\n   * See the docs for details: https://stripe.com/docs/security/guide#validating-pci-compliance\n   */\n  dangerouslyGetFullCardDetails?: boolean;\n}\n\n/**\n *  Card Form Component\n *\n * @example\n * ```ts\n * <CardForm\n *    onFormComplete={(cardDetails) => {\n *    console.log('card details', cardDetails);\n *      setCard(cardDetails);\n *    }}\n *    style={{height: 200}}\n *  />\n * ```\n * @param __namedParameters Props\n * @returns JSX.Element\n * @category ReactComponents\n */\nexport const CardForm = forwardRef<CardFormView.Methods, Props>(\n  (\n    {\n      onFormComplete,\n      cardStyle,\n      // isUserInteractionEnabled = true,\n      // postalCodeEnabled = true,\n      // onFocus,\n      // onBlur,\n      placeholders,\n      defaultValues,\n      ...props\n    },\n    ref\n  ) => {\n    const inputRef = useRef<any>(null);\n\n    const onFormCompleteHandler = useCallback(\n      (event: NativeSyntheticEvent<CardFormView.Details>) => {\n        const card = event.nativeEvent;\n\n        const data: CardFormView.Details = {\n          last4: card.last4,\n          expiryMonth: card.expiryMonth,\n          expiryYear: card.expiryYear,\n          complete: card.complete,\n          brand: card.brand,\n          country: card.country,\n          postalCode: card.postalCode,\n        };\n\n        if (card.hasOwnProperty('number') || card.hasOwnProperty('cvc')) {\n          data.number = card.number || '';\n          data.cvc = card.cvc || '';\n          if (__DEV__ && onFormComplete && card.complete) {\n            console.warn(\n              `[stripe-react-native] ⚠️ WARNING: You've enabled \\`dangerouslyGetFullCardDetails\\`, meaning full card details are being returned. Only do this if you're certain that you fulfill the necessary PCI compliance requirements. Make sure that you're not mistakenly logging or storing full card details! See the docs for details: https://stripe.com/docs/security/guide#validating-pci-compliance`\n            );\n          }\n        }\n        onFormComplete?.(data);\n      },\n      [onFormComplete]\n    );\n\n    const focus = () => {\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(inputRef.current),\n        'focus' as any,\n        []\n      );\n    };\n\n    const blur = () => {\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(inputRef.current),\n        'blur' as any,\n        []\n      );\n    };\n\n    useImperativeHandle(ref, () => ({\n      focus,\n      blur,\n    }));\n\n    const onFocusHandler = useCallback((event) => {\n      const { focusedField } = event.nativeEvent;\n      if (focusedField) {\n        focusInput(inputRef.current);\n        // onFocus?.(focusedField);\n      } else {\n        // onBlur?.();\n      }\n    }, []);\n\n    useLayoutEffect(() => {\n      const inputRefValue = inputRef.current;\n      if (inputRefValue !== null) {\n        registerInput(inputRefValue);\n        return () => {\n          unregisterInput(inputRefValue);\n          if (currentlyFocusedInput() === inputRefValue) {\n            inputRefValue.blur();\n          }\n        };\n      }\n      return () => {};\n    }, [inputRef]);\n\n    return (\n      <CardFormNative\n        ref={inputRef}\n        onFormComplete={onFormCompleteHandler}\n        cardStyle={{\n          backgroundColor: cardStyle?.backgroundColor,\n          borderColor: cardStyle?.borderColor,\n          borderWidth: cardStyle?.borderWidth,\n          borderRadius: cardStyle?.borderRadius,\n          cursorColor: cardStyle?.cursorColor,\n          fontSize: cardStyle?.fontSize,\n          placeholderColor: cardStyle?.placeholderColor,\n          textColor: cardStyle?.textColor,\n          textErrorColor: cardStyle?.textErrorColor,\n          fontFamily: cardStyle?.fontFamily,\n          // disabledBackgroundColor: cardStyle?.disabledBackgroundColor,\n          // type: cardStyle?.type,\n        }}\n        // isUserInteractionEnabledValue={isUserInteractionEnabled}\n        placeholders={{\n          number: placeholders?.number,\n          expiration: placeholders?.expiration,\n          cvc: placeholders?.cvc,\n          postalCode: placeholders?.postalCode,\n        }}\n        defaultValues={{\n          ...(defaultValues ?? {}),\n        }}\n        onFocusChange={onFocusHandler}\n        // postalCodeEnabled={postalCodeEnabled}\n        {...props}\n      />\n    );\n  }\n);\n"]}