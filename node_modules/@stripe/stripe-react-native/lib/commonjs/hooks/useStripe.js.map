{"version":3,"sources":["useStripe.tsx"],"names":["useStripe","isApplePaySupported","setApplePaySupported","checkApplePaySupport","isSupported","isiOS","NativeStripeSdk","_createPaymentMethod","data","options","_createToken","params","_retrievePaymentIntent","clientSecret","_retrieveSetupIntent","_confirmPayment","paymentIntentClientSecret","_presentApplePay","_updateApplePaySummaryItems","summaryItems","errorAddressFields","_confirmApplePayPayment","_handleNextAction","returnURL","_confirmSetupIntent","_createTokenForCVCUpdate","cvc","_initPaymentSheet","_presentPaymentSheet","_confirmPaymentSheetPayment","_handleURLCallback","url","_isGooglePaySupported","_initGooglePay","_presentGooglePay","_createGooglePayPaymentMethod","_openApplePaySetup","_collectBankAccountForPayment","_collectBankAccountForSetup","_verifyMicrodepositsForPayment","_verifyMicrodepositsForSetup","_canAddCardToWallet","_collectBankAccountToken","_collectFinancialConnectionsAccounts","retrievePaymentIntent","retrieveSetupIntent","confirmPayment","createPaymentMethod","handleNextAction","presentApplePay","confirmApplePayPayment","confirmSetupIntent","createTokenForCVCUpdate","updateApplePaySummaryItems","handleURLCallback","confirmPaymentSheetPayment","presentPaymentSheet","initPaymentSheet","createToken","isGooglePaySupported","initGooglePay","presentGooglePay","createGooglePayPaymentMethod","openApplePaySetup","collectBankAccountForPayment","collectBankAccountForSetup","verifyMicrodepositsForPayment","verifyMicrodepositsForSetup","canAddCardToWallet","collectBankAccountToken","collectFinancialConnectionsAccounts"],"mappings":"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","sourcesContent":["import type {\n  PaymentMethod,\n  PaymentIntent,\n  ApplePay,\n  PaymentSheet,\n  CreatePaymentMethodResult,\n  RetrievePaymentIntentResult,\n  RetrieveSetupIntentResult,\n  ConfirmPaymentResult,\n  HandleNextActionResult,\n  ConfirmSetupIntentResult,\n  CreateTokenForCVCUpdateResult,\n  ApplePayResult,\n  ApplePayError,\n  StripeError,\n  InitPaymentSheetResult,\n  PresentPaymentSheetResult,\n  ConfirmPaymentSheetPaymentResult,\n  SetupIntent,\n  CreateTokenResult,\n  PayWithGooglePayResult,\n  GooglePayInitResult,\n  GooglePay,\n  CreateGooglePayPaymentMethodResult,\n  OpenApplePaySetupResult,\n  Token,\n  VerifyMicrodepositsParams,\n  VerifyMicrodepositsForPaymentResult,\n  VerifyMicrodepositsForSetupResult,\n  CollectBankAccountForSetupResult,\n  CollectBankAccountForPaymentResult,\n  CanAddCardToWalletParams,\n  CanAddCardToWalletResult,\n  FinancialConnections,\n} from '../types';\nimport { useCallback, useEffect, useState } from 'react';\nimport { isiOS } from '../helpers';\nimport NativeStripeSdk from '../NativeStripeSdk';\nimport {\n  confirmPayment,\n  createPaymentMethod,\n  retrievePaymentIntent,\n  retrieveSetupIntent,\n  confirmApplePayPayment,\n  confirmSetupIntent,\n  createTokenForCVCUpdate,\n  handleNextAction,\n  handleURLCallback,\n  presentApplePay,\n  updateApplePaySummaryItems,\n  initPaymentSheet,\n  presentPaymentSheet,\n  confirmPaymentSheetPayment,\n  createToken,\n  isGooglePaySupported,\n  initGooglePay,\n  createGooglePayPaymentMethod,\n  presentGooglePay,\n  openApplePaySetup,\n  collectBankAccountForPayment,\n  collectBankAccountForSetup,\n  verifyMicrodepositsForPayment,\n  verifyMicrodepositsForSetup,\n  canAddCardToWallet,\n  collectBankAccountToken,\n  collectFinancialConnectionsAccounts,\n} from '../functions';\n\n/**\n * useStripe hook\n */\nexport function useStripe() {\n  const [isApplePaySupported, setApplePaySupported] = useState<boolean | null>(\n    null\n  );\n\n  useEffect(() => {\n    async function checkApplePaySupport() {\n      const isSupported =\n        isiOS && (await NativeStripeSdk.isApplePaySupported());\n      setApplePaySupported(isSupported);\n    }\n\n    checkApplePaySupport();\n  }, []);\n\n  const _createPaymentMethod = useCallback(\n    async (\n      data: PaymentMethod.CreateParams,\n      options: PaymentMethod.CreateOptions = {}\n    ): Promise<CreatePaymentMethodResult> => {\n      return createPaymentMethod(data, options);\n    },\n    []\n  );\n\n  const _createToken = useCallback(\n    async (params: Token.CreateParams): Promise<CreateTokenResult> => {\n      return createToken(params);\n    },\n    []\n  );\n\n  const _retrievePaymentIntent = useCallback(\n    async (clientSecret: string): Promise<RetrievePaymentIntentResult> => {\n      return retrievePaymentIntent(clientSecret);\n    },\n    []\n  );\n\n  const _retrieveSetupIntent = useCallback(\n    async (clientSecret: string): Promise<RetrieveSetupIntentResult> => {\n      return retrieveSetupIntent(clientSecret);\n    },\n    []\n  );\n\n  const _confirmPayment = useCallback(\n    async (\n      paymentIntentClientSecret: string,\n      data?: PaymentIntent.ConfirmParams,\n      options: PaymentIntent.ConfirmOptions = {}\n    ): Promise<ConfirmPaymentResult> => {\n      return confirmPayment(paymentIntentClientSecret, data, options);\n    },\n    []\n  );\n\n  const _presentApplePay = useCallback(\n    async (params: ApplePay.PresentParams): Promise<ApplePayResult> => {\n      return presentApplePay(params);\n    },\n    []\n  );\n\n  const _updateApplePaySummaryItems = useCallback(\n    async (\n      summaryItems: ApplePay.CartSummaryItem[],\n      errorAddressFields: Array<{\n        field: ApplePay.AddressFields;\n        message?: string;\n      }> = []\n    ): Promise<{ error?: StripeError<ApplePayError> }> => {\n      return updateApplePaySummaryItems(summaryItems, errorAddressFields);\n    },\n    []\n  );\n\n  const _confirmApplePayPayment = useCallback(\n    async (\n      clientSecret: string\n    ): Promise<{ error?: StripeError<ApplePayError> }> => {\n      return confirmApplePayPayment(clientSecret);\n    },\n    []\n  );\n\n  const _handleNextAction = useCallback(\n    async (\n      paymentIntentClientSecret: string,\n      returnURL?: string\n    ): Promise<HandleNextActionResult> => {\n      return handleNextAction(paymentIntentClientSecret, returnURL);\n    },\n    []\n  );\n\n  const _confirmSetupIntent = useCallback(\n    async (\n      paymentIntentClientSecret: string,\n      data: SetupIntent.ConfirmParams,\n      options: SetupIntent.ConfirmOptions = {}\n    ): Promise<ConfirmSetupIntentResult> => {\n      return confirmSetupIntent(paymentIntentClientSecret, data, options);\n    },\n    []\n  );\n\n  const _createTokenForCVCUpdate = useCallback(\n    async (cvc: string): Promise<CreateTokenForCVCUpdateResult> => {\n      return createTokenForCVCUpdate(cvc);\n    },\n    []\n  );\n\n  const _initPaymentSheet = useCallback(\n    async (\n      params: PaymentSheet.SetupParams\n    ): Promise<InitPaymentSheetResult> => {\n      return initPaymentSheet(params);\n    },\n    []\n  );\n\n  const _presentPaymentSheet =\n    useCallback(async (): Promise<PresentPaymentSheetResult> => {\n      return presentPaymentSheet();\n    }, []);\n\n  const _confirmPaymentSheetPayment =\n    useCallback(async (): Promise<ConfirmPaymentSheetPaymentResult> => {\n      return confirmPaymentSheetPayment();\n    }, []);\n\n  const _handleURLCallback = useCallback(\n    async (url: string): Promise<boolean> => {\n      return handleURLCallback(url);\n    },\n    []\n  );\n\n  const _isGooglePaySupported = useCallback(\n    async (params?: GooglePay.IsSupportedParams): Promise<boolean> => {\n      return isGooglePaySupported(params);\n    },\n    []\n  );\n\n  const _initGooglePay = useCallback(\n    async (params: GooglePay.InitParams): Promise<GooglePayInitResult> => {\n      return initGooglePay(params);\n    },\n    []\n  );\n\n  const _presentGooglePay = useCallback(\n    async (\n      params: GooglePay.PresentParams\n    ): Promise<PayWithGooglePayResult> => {\n      return presentGooglePay(params);\n    },\n    []\n  );\n\n  const _createGooglePayPaymentMethod = useCallback(\n    async (\n      params: GooglePay.CreatePaymentMethodParams\n    ): Promise<CreateGooglePayPaymentMethodResult> => {\n      return createGooglePayPaymentMethod(params);\n    },\n    []\n  );\n\n  const _openApplePaySetup =\n    useCallback(async (): Promise<OpenApplePaySetupResult> => {\n      return openApplePaySetup();\n    }, []);\n\n  const _collectBankAccountForPayment = useCallback(\n    async (\n      clientSecret: string,\n      params: PaymentMethod.CollectBankAccountParams\n    ): Promise<CollectBankAccountForPaymentResult> => {\n      return collectBankAccountForPayment(clientSecret, params);\n    },\n    []\n  );\n\n  const _collectBankAccountForSetup = useCallback(\n    async (\n      clientSecret: string,\n      params: PaymentMethod.CollectBankAccountParams\n    ): Promise<CollectBankAccountForSetupResult> => {\n      return collectBankAccountForSetup(clientSecret, params);\n    },\n    []\n  );\n\n  const _verifyMicrodepositsForPayment = useCallback(\n    async (\n      clientSecret: string,\n      params: VerifyMicrodepositsParams\n    ): Promise<VerifyMicrodepositsForPaymentResult> => {\n      return verifyMicrodepositsForPayment(clientSecret, params);\n    },\n    []\n  );\n\n  const _verifyMicrodepositsForSetup = useCallback(\n    async (\n      clientSecret: string,\n      params: VerifyMicrodepositsParams\n    ): Promise<VerifyMicrodepositsForSetupResult> => {\n      return verifyMicrodepositsForSetup(clientSecret, params);\n    },\n    []\n  );\n\n  const _canAddCardToWallet = useCallback(\n    async (\n      params: CanAddCardToWalletParams\n    ): Promise<CanAddCardToWalletResult> => {\n      return canAddCardToWallet(params);\n    },\n    []\n  );\n\n  const _collectBankAccountToken = useCallback(\n    async (clientSecret: string): Promise<FinancialConnections.TokenResult> => {\n      return collectBankAccountToken(clientSecret);\n    },\n    []\n  );\n\n  const _collectFinancialConnectionsAccounts = useCallback(\n    async (\n      clientSecret: string\n    ): Promise<FinancialConnections.SessionResult> => {\n      return collectFinancialConnectionsAccounts(clientSecret);\n    },\n    []\n  );\n\n  return {\n    retrievePaymentIntent: _retrievePaymentIntent,\n    retrieveSetupIntent: _retrieveSetupIntent,\n    confirmPayment: _confirmPayment,\n    createPaymentMethod: _createPaymentMethod,\n    handleNextAction: _handleNextAction,\n    isApplePaySupported: isApplePaySupported,\n    presentApplePay: _presentApplePay,\n    confirmApplePayPayment: _confirmApplePayPayment,\n    confirmSetupIntent: _confirmSetupIntent,\n    createTokenForCVCUpdate: _createTokenForCVCUpdate,\n    updateApplePaySummaryItems: _updateApplePaySummaryItems,\n    handleURLCallback: _handleURLCallback,\n    confirmPaymentSheetPayment: _confirmPaymentSheetPayment,\n    presentPaymentSheet: _presentPaymentSheet,\n    initPaymentSheet: _initPaymentSheet,\n    createToken: _createToken,\n    isGooglePaySupported: _isGooglePaySupported,\n    initGooglePay: _initGooglePay,\n    presentGooglePay: _presentGooglePay,\n    createGooglePayPaymentMethod: _createGooglePayPaymentMethod,\n    openApplePaySetup: _openApplePaySetup,\n    collectBankAccountForPayment: _collectBankAccountForPayment,\n    collectBankAccountForSetup: _collectBankAccountForSetup,\n    verifyMicrodepositsForPayment: _verifyMicrodepositsForPayment,\n    verifyMicrodepositsForSetup: _verifyMicrodepositsForSetup,\n    canAddCardToWallet: _canAddCardToWallet,\n    collectBankAccountToken: _collectBankAccountToken,\n    collectFinancialConnectionsAccounts: _collectFinancialConnectionsAccounts,\n  };\n}\n"]}