{"version":3,"sources":["useApplePay.tsx"],"names":["eventEmitter","NativeEventEmitter","NativeModules","StripeSdk","SET_SHIPPING_METHOD_CALLBACK_NAME","SET_SHIPPING_CONTACT_CALLBACK_NAME","useApplePay","onShippingMethodSelected","onShippingContactSelected","isApplePaySupported","_presentApplePay","presentApplePay","_confirmApplePayPayment","confirmApplePayPayment","updateApplePaySummaryItems","_openApplePaySetup","openApplePaySetup","items","setItems","loading","setLoading","onDidSetShippingMethod","result","shippingMethod","onDidSetShippingContact","shippingContact","didSetShippingMethodListener","addListener","didSetShippingContactListener","remove","params","cartItems","error","clientSecret"],"mappings":"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","sourcesContent":["import type { ApplePay, ApplePayError, StripeError } from '../types';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useStripe } from './useStripe';\nimport { NativeEventEmitter, NativeModules } from 'react-native';\n\nconst eventEmitter = new NativeEventEmitter(NativeModules.StripeSdk);\n\nexport interface Props {\n  /**\n   *\n   * @example\n   * ```ts\n   * const { presentApplePay } = useApplePay({\n   *  onShippingMethodSelected: (shippingMethod, handler) => {\n   *    handler([\n   *      { label: 'Example item name 1', amount: '11.00' },\n   *      { label: 'Example item name 2', amount: '25.00' },\n   *   ]);\n   *  }\n   * })\n   * ```\n   */\n  onShippingMethodSelected?: (\n    shippingMethod: ApplePay.ShippingMethod,\n    handler: (summaryItems: ApplePay.CartSummaryItem[]) => Promise<{\n      error?: StripeError<ApplePayError>;\n    }>\n  ) => void;\n  /**\n   *\n   * @example\n   * ```ts\n   * const { presentApplePay } = useApplePay({\n   *  onShippingContactSelected: (shippingContact, handler) => {\n   *    handler([\n   *      { label: 'Example item name 1', amount: '11.00' },\n   *      { label: 'Example item name 2', amount: '25.00' },\n   *    ], [\n   *      { field: 'city', message: 'city error' },\n   *    ]);\n   *  }\n   * })\n   * ```\n   */\n  onShippingContactSelected?: (\n    shippingContact: ApplePay.ShippingContact,\n    handler: (\n      summaryItems: ApplePay.CartSummaryItem[],\n      errorAddressFields?: Array<{\n        field: ApplePay.AddressFields;\n        message?: string;\n      }>\n    ) => Promise<{\n      error?: StripeError<ApplePayError>;\n    }>\n  ) => void;\n}\n\nconst SET_SHIPPING_METHOD_CALLBACK_NAME = 'onDidSetShippingMethod';\nconst SET_SHIPPING_CONTACT_CALLBACK_NAME = 'onDidSetShippingContact';\n\n/**\n * useApplePay hook\n */\nexport function useApplePay({\n  onShippingMethodSelected,\n  onShippingContactSelected,\n}: Props = {}) {\n  const {\n    isApplePaySupported,\n    presentApplePay: _presentApplePay,\n    confirmApplePayPayment: _confirmApplePayPayment,\n    updateApplePaySummaryItems,\n    openApplePaySetup: _openApplePaySetup,\n  } = useStripe();\n  const [items, setItems] = useState<ApplePay.CartSummaryItem[] | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  const onDidSetShippingMethod = useCallback(\n    (result: { shippingMethod: ApplePay.ShippingMethod }) => {\n      if (onShippingMethodSelected) {\n        onShippingMethodSelected(\n          result.shippingMethod,\n          updateApplePaySummaryItems\n        );\n      } else {\n        updateApplePaySummaryItems(items as ApplePay.CartSummaryItem[]);\n      }\n    },\n    [items, onShippingMethodSelected, updateApplePaySummaryItems]\n  );\n\n  const onDidSetShippingContact = useCallback(\n    (result: { shippingContact: ApplePay.ShippingContact }) => {\n      if (onShippingContactSelected) {\n        onShippingContactSelected(\n          result.shippingContact,\n          updateApplePaySummaryItems\n        );\n      } else {\n        updateApplePaySummaryItems(items as ApplePay.CartSummaryItem[]);\n      }\n    },\n    [items, onShippingContactSelected, updateApplePaySummaryItems]\n  );\n\n  useEffect(() => {\n    const didSetShippingMethodListener = eventEmitter.addListener(\n      SET_SHIPPING_METHOD_CALLBACK_NAME,\n      onDidSetShippingMethod\n    );\n    const didSetShippingContactListener = eventEmitter.addListener(\n      SET_SHIPPING_CONTACT_CALLBACK_NAME,\n      onDidSetShippingContact\n    );\n\n    return () => {\n      didSetShippingMethodListener.remove();\n      didSetShippingContactListener.remove();\n    };\n  }, [onDidSetShippingContact, onDidSetShippingMethod]);\n\n  const presentApplePay = useCallback(\n    async (params: ApplePay.PresentParams) => {\n      setLoading(true);\n      setItems(params.cartItems);\n      const result = await _presentApplePay(params);\n      if (result.error) {\n        setItems(null);\n      }\n      setLoading(false);\n      return result;\n    },\n    [_presentApplePay]\n  );\n\n  const openApplePaySetup = useCallback(async () => {\n    setLoading(true);\n    const result = await _openApplePaySetup();\n    setLoading(false);\n    return result;\n  }, [_openApplePaySetup]);\n\n  const confirmApplePayPayment = useCallback(\n    async (clientSecret: string) => {\n      setLoading(true);\n      const result = await _confirmApplePayPayment(clientSecret);\n      setItems(null);\n      setLoading(false);\n      return result;\n    },\n    [_confirmApplePayPayment]\n  );\n\n  return {\n    loading,\n    presentApplePay,\n    confirmApplePayPayment,\n    isApplePaySupported,\n    openApplePaySetup,\n  };\n}\n"]}