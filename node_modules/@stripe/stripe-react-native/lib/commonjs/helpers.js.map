{"version":3,"sources":["helpers.ts"],"names":["TextInputState","require","shouldAttributeExpo","NativeModules","NativeUnimoduleProxy","isiOS","Platform","OS","isAndroid","createError","error","code","message","localizedMessage","declineCode","stripeErrorCode","type","unsupportedMethodMessage","field","focusInput","ref","__DEV__","console","log","registerInput","unregisterInput","currentlyFocusedInput"],"mappings":"4RAGA,yCACA,GAAMA,CAAAA,cAAc,CAAGC,OAAO,CAAC,4DAAD,CAA9B,CAOO,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CACvC,GAAI,CACF,MAAO,CAAC,CAACC,2BAAcC,oBAAvB,CACD,CAAC,cAAM,CACN,MAAO,MAAP,CACD,CACF,CANM,C,gDAQA,GAAMC,CAAAA,KAAK,CAAGC,sBAASC,EAAT,GAAgB,KAA9B,C,oBACA,GAAMC,CAAAA,SAAS,CAAGF,sBAASC,EAAT,GAAgB,SAAlC,C,4BAEA,QAASE,CAAAA,WAAT,CAAwBC,KAAxB,CAA+C,CACpD,MAAO,CACLC,IAAI,CAAED,KAAK,CAACC,IADP,CAELC,OAAO,CAAEF,KAAK,CAACE,OAFV,CAGLC,gBAAgB,CAAEH,KAAK,CAACG,gBAHnB,CAILC,WAAW,CAAEJ,KAAK,CAACI,WAJd,CAKLC,eAAe,CAAEL,KAAK,CAACK,eALlB,CAMLC,IAAI,CAAEN,KAAK,CAACM,IANP,CAAP,CAQD,CAEM,GAAMC,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACC,KAAD,QACnCA,CAAAA,KADmC,2FAAjC,C,0DAGA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,GAAD,CAAsC,CAC9D,GAAI,cAAgBpB,CAAAA,cAApB,CAAoC,CAClCA,cAAc,CAACmB,UAAf,CAA0BC,GAA1B,EACD,CAFD,IAEO,CACL,GAAIC,OAAJ,CAAa,CACXC,OAAO,CAACC,GAAR,CAAYN,wBAAwB,CAAC,YAAD,CAApC,EACD,CACF,CACF,CARM,C,8BAUA,GAAMO,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACJ,GAAD,CAAsC,CACjE,GAAI,iBAAmBpB,CAAAA,cAAvB,CAAuC,CACrCA,cAAc,CAACwB,aAAf,CAA6BJ,GAA7B,EACD,CAFD,IAEO,CACL,GAAIC,OAAJ,CAAa,CACXC,OAAO,CAACC,GAAR,CAAYN,wBAAwB,CAAC,eAAD,CAApC,EACD,CACF,CACF,CARM,C,oCAUA,GAAMQ,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACL,GAAD,CAAsC,CACnE,GAAI,mBAAqBpB,CAAAA,cAAzB,CAAyC,CACvCA,cAAc,CAACyB,eAAf,CAA+BL,GAA/B,EACD,CAFD,IAEO,CACL,GAAIC,OAAJ,CAAa,CACXC,OAAO,CAACC,GAAR,CAAYN,wBAAwB,CAAC,iBAAD,CAApC,EACD,CACF,CACF,CARM,C,wCAUA,GAAMS,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,EAAM,CACzC,GAAI,yBAA2B1B,CAAAA,cAA/B,CAA+C,CAC7C,MAAOA,CAAAA,cAAc,CAAC0B,qBAAf,EAAP,CACD,CAFD,IAEO,CACL,GAAIL,OAAJ,CAAa,CACXC,OAAO,CAACC,GAAR,CAAYN,wBAAwB,CAAC,uBAAD,CAApC,EACD,CACF,CACF,CARM,C","sourcesContent":["import type React from 'react';\nimport type { StripeError } from './types';\n\nimport { Platform, NativeModules } from 'react-native';\nconst TextInputState = require('react-native/Libraries/Components/TextInput/TextInputState');\n\n/**\n * Determines whether or not this library is being used inside of\n * an \"Expo\" project by identifying if Expo's native module\n * infrastructure (react-native-unimodules AKA expo-modules) is available.\n */\nexport const shouldAttributeExpo = () => {\n  try {\n    return !!NativeModules.NativeUnimoduleProxy;\n  } catch {\n    return false;\n  }\n};\n\nexport const isiOS = Platform.OS === 'ios';\nexport const isAndroid = Platform.OS === 'android';\n\nexport function createError<T>(error: StripeError<T>) {\n  return {\n    code: error.code,\n    message: error.message,\n    localizedMessage: error.localizedMessage,\n    declineCode: error.declineCode,\n    stripeErrorCode: error.stripeErrorCode,\n    type: error.type,\n  };\n}\n\nexport const unsupportedMethodMessage = (field: string) =>\n  `${field} method is not supported. Consider to upgrade react-native version to 0.63.x or higher`;\n\nexport const focusInput = (ref: React.MutableRefObject<any>) => {\n  if ('focusInput' in TextInputState) {\n    TextInputState.focusInput(ref);\n  } else {\n    if (__DEV__) {\n      console.log(unsupportedMethodMessage('focusInput'));\n    }\n  }\n};\n\nexport const registerInput = (ref: React.MutableRefObject<any>) => {\n  if ('registerInput' in TextInputState) {\n    TextInputState.registerInput(ref);\n  } else {\n    if (__DEV__) {\n      console.log(unsupportedMethodMessage('registerInput'));\n    }\n  }\n};\n\nexport const unregisterInput = (ref: React.MutableRefObject<any>) => {\n  if ('unregisterInput' in TextInputState) {\n    TextInputState.unregisterInput(ref);\n  } else {\n    if (__DEV__) {\n      console.log(unsupportedMethodMessage('unregisterInput'));\n    }\n  }\n};\n\nexport const currentlyFocusedInput = () => {\n  if ('currentlyFocusedInput' in TextInputState) {\n    return TextInputState.currentlyFocusedInput();\n  } else {\n    if (__DEV__) {\n      console.log(unsupportedMethodMessage('currentlyFocusedInput'));\n    }\n  }\n};\n"]}